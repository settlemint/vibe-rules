name: Build and Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: linux-x64
            os: ubuntu-latest
          - target: linux-arm64
            os: ubuntu-latest
          - target: macos-x64
            os: macos-latest
          - target: macos-arm64
            os: macos-latest
          - target: windows-x64
            os: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup 1Password
        uses: 1password/load-secrets-action/configure@v2
        with:
          service-account-token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

      - name: Load all secrets
        id: secrets
        uses: 1password/load-secrets-action@v2
        env:
          NPM_TOKEN: op://platform/npmjs/credential

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Build all binaries
        run: bun run build

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: dist/
          retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup 1Password
        uses: 1password/load-secrets-action/configure@v2
        with:
          service-account-token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

      - name: Load all secrets
        id: secrets
        uses: 1password/load-secrets-action@v2
        env:
          NPM_TOKEN: op://platform/npmjs/credential

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: binaries
          path: dist/

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
          generate_release_notes: true
          draft: false
          prerelease: false

  publish-npm:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup 1Password
        uses: 1password/load-secrets-action/configure@v2
        with:
          service-account-token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

      - name: Load all secrets
        id: secrets
        uses: 1password/load-secrets-action@v2
        env:
          NPM_TOKEN: op://platform/npmjs/credential

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: binaries
          path: dist/

      - name: Create platform wrapper script
        run: |
          cat > dist/vibe-rules << 'EOF'
          #!/usr/bin/env node
          const { execFileSync } = require('child_process');
          const { join } = require('path');
          const { platform, arch } = process;

          const getBinary = () => {
            const map = {
              'darwin-x64': 'vibe-rules-macos-x64',
              'darwin-arm64': 'vibe-rules-macos-arm64',
              'linux-x64': 'vibe-rules-linux-x64',
              'linux-arm64': 'vibe-rules-linux-arm64',
              'win32-x64': 'vibe-rules-windows-x64.exe',
            };

            const key = `${platform}-${arch}`;
            const binary = map[key];

            if (!binary) {
              console.error(`Unsupported platform: ${platform} ${arch}`);
              process.exit(1);
            }

            return join(__dirname, binary);
          };

          try {
            execFileSync(getBinary(), process.argv.slice(2), { stdio: 'inherit' });
          } catch (error) {
            process.exit(error.status || 1);
          }
          EOF

          chmod +x dist/vibe-rules

      - name: Publish to NPM
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
